#https://quantumcomputing.stackexchange.com/questions/6842/is-there-a-simple-formulaic-way-to-construct-a-modular-exponentiation-circuit
#https://qiskit.org/textbook/ch-states/atoms-computation.html

from warnings import simplefilter
simplefilter(action='ignore', category=DeprecationWarning)

from qiskit import QuantumCircuit, QuantumRegister, ClassicalRegister, Aer, execute
#from qiskit.visualization import plot_histogram
import numpy as np

sim = Aer.get_backend('qasm_simulator')

#https://rosettacode.org/wiki/Modular_inverse#Python
# same as pow(a, -1, N)
def extended_gcd(aa, bb):
    lastremainder, remainder = abs(aa), abs(bb)
    x, lastx, y, lasty = 0, 1, 1, 0
    while remainder:
        lastremainder, (quotient, remainder) = remainder, divmod(lastremainder, remainder)
        x, lastx = lastx - quotient*x, x
        y, lasty = lasty - quotient*y, y
    return lastremainder, lastx * (-1 if aa < 0 else 1), lasty * (-1 if bb < 0 else 1)
 
def modinv(a, m):
	g, x, y = extended_gcd(a, m)
	if g != 1:
		raise ValueError
	return x % m


def a2jmodN(a, j, N):
    """Compute a^{2^j} (mod N) by repeated squaring"""
    for i in range(j):
        a = np.mod(a**2, N)
    return a

def carry_gate(inverse):
    U = QuantumCircuit(4)
    U.ccx(1, 2, 3)
    U.cx(1, 2)
    U.ccx(0, 2, 3)
    if inverse == True:
        U = U.inverse()
    U = U.to_gate()
    U.name = "carry"
    return U

def sum_gate(inverse):
    U = QuantumCircuit(3)
    U.cx(1, 2)
    U.cx(0, 2)
    if inverse == True:
        U = U.inverse()
    U = U.to_gate()
    U.name = "sum"
    return U



c_x0 = QuantumRegister(1, 'c_x0')
c_x1 = QuantumRegister(1, 'c_x1')
c_x2 = QuantumRegister(1, 'c_x2')
z_z0 = QuantumRegister(1, 'z_z0')
z_z1 = QuantumRegister(1, 'z_z1')
z_z2 = QuantumRegister(1, 'z_z2')
a_a0 = QuantumRegister(1, 'a_a0')
a_a1 = QuantumRegister(1, 'a_a1')
a_a2 = QuantumRegister(1, 'a_a2')
b_b0 = QuantumRegister(1, 'b_b0')
b_b1 = QuantumRegister(1, 'b_b1')
b_b2 = QuantumRegister(1, 'b_b2')
b_b3 = QuantumRegister(1, 'b_b3')
c_c0 = QuantumRegister(1, 'c_c0')
c_c1 = QuantumRegister(1, 'c_c1')
c_c2 = QuantumRegister(1, 'c_c2')
n_n0 = QuantumRegister(1, 'n_n0')
n_n1 = QuantumRegister(1, 'n_n1')
n_n2 = QuantumRegister(1, 'n_n2')
zero_t = QuantumRegister(1, 'zero_t')


c = ClassicalRegister(3)


def ADDER(inverse):
    U = QuantumCircuit(c_c0, a_a0, b_b0, c_c1,
                        a_a1, b_b1, c_c2, a_a2, b_b2, b_b3)
    U.append(carry_gate(False), [c_c0, a_a0, b_b0, c_c1])
    U.append(carry_gate(False), [c_c1, a_a1, b_b1, c_c2])
    U.append(carry_gate(False), [c_c2, a_a2, b_b2, b_b3])
    U.cx(a_a2, b_b2)
    U.append(sum_gate(False), [c_c2, a_a2, b_b2])
    U.append(carry_gate(True), [c_c1, a_a1, b_b1, c_c2])
    U.append(sum_gate(False), [c_c1, a_a1, b_b1])
    U.append(carry_gate(True), [c_c0, a_a0, b_b0, c_c1])
    U.append(sum_gate(False), [c_c0, a_a0, b_b0])
    if inverse == True:
        U = U.inverse()
    U.to_gate()
    U.name = "ADDER"
    return U


# def SWAP(inverse):
#     U = QuantumCircuit(a_a0, a_a1, a_a2, b_b0, b_b1, b_b2, b_b3,
#                         c_c0, c_c1, c_c2)
#     U.swap(0, 1)
#     U.swap(0, 4)
#     U.swap(0, 5)
#     U.swap(0, 8)
#     U.swap(2, 3)
#     U.swap(3, 7)
#     U.swap(6, 9)
#     if inverse == True:
#         U.inverse()
#     U.to_gate()
#     U.name = "SWAP"
#     return U



def ADDER_MOD(inverse):
    U = QuantumCircuit(c_c0, a_a0, b_b0, c_c1,
                        a_a1, b_b1, c_c2, a_a2, b_b2, b_b3, n_n0, n_n1, n_n2, zero_t)

    U.append(ADDER(False),
              [c_c0, a_a0, b_b0, c_c1,
                            a_a1, b_b1, c_c2, a_a2, b_b2, b_b3])

    U.barrier()
    
    U.swap(a_a0, n_n0)
    U.swap(a_a1, n_n1)
    U.swap(a_a2, n_n2)
    
    U.barrier()
    
    U.append(ADDER(True),
              [c_c0, a_a0, b_b0, c_c1,
                            a_a1, b_b1, c_c2, a_a2, b_b2, b_b3])
    
    U.barrier()
    
    U.x(b_b3)
    U.cx(b_b3, zero_t)
    U.x(b_b3)
    
    U.barrier()
    
    U.cx(zero_t, a_a2)
    U.cx(zero_t, a_a0)
    
    
    U.barrier()
    
    U.append(ADDER(False),
              [c_c0, a_a0, b_b0, c_c1,
                            a_a1, b_b1, c_c2, a_a2, b_b2, b_b3])
    
    U.barrier()
    
    U.cx(zero_t, a_a0)
    U.cx(zero_t, a_a2)
    
    U.barrier()
    
    # swap repeat
    U.swap(a_a0, n_n0)
    U.swap(a_a1, n_n1)
    U.swap(a_a2, n_n2)
    
    U.barrier()
    
    U.append(ADDER(True),
              [c_c0, a_a0, b_b0, c_c1,
                            a_a1, b_b1, c_c2, a_a2, b_b2, b_b3])
    
    U.barrier()
    
    U.cx(b_b3, zero_t)
    
    U.barrier()
    
    U.append(ADDER(False),
              [c_c0, a_a0, b_b0, c_c1,
                            a_a1, b_b1, c_c2, a_a2, b_b2, b_b3])
    if inverse == True:
        U = U.inverse()
    U.name = "ADDER MOD"
    return U


def Ctrl_MULT_MOD(N, m, inverse):  
    U = QuantumCircuit(c_x0, z_z0, z_z1, z_z2, c_c0, a_a0, b_b0, c_c1,
                        a_a1, b_b1, c_c2, a_a2, b_b2, b_b3, 
                        n_n0, n_n1, n_n2, zero_t)
    
    # writes m * 2**0 mod N to the a register
    res = m * 2**0 % N  
    if res in [1, 3, 5, 8]:
        U.ccx(c_x0, z_z0, a_a0)
    if res in [2, 3, 6, 7]:
        U.ccx(c_x0, z_z0, a_a1)
    if res in [4, 5, 6, 7]:
        U.ccx(c_x0, z_z0, a_a2)
    
    
    U.append(ADDER_MOD(False), [c_c0, a_a0, b_b0, c_c1, 
                          a_a1, b_b1, c_c2, a_a2, b_b2, b_b3, 
                          n_n0, n_n1, n_n2, zero_t])
    
    # writes m * 2**0 mod N to the a register
    res = m * 2**0 % N 
    if res in [1, 3, 5, 8]:
        U.ccx(c_x0, z_z0, a_a0)
    if res in [2, 3, 6, 7]:
        U.ccx(c_x0, z_z0, a_a1)
    if res in [4, 5, 6, 7]:
        U.ccx(c_x0, z_z0, a_a2)
    
    U.barrier()
    
    # writes m * 2**1 mod N to the a register
    res = m * 2**1 % N 
    if res in [1, 3, 5, 8]:
        U.ccx(c_x0, z_z1, a_a0)
    if res in [2, 3, 6, 7]:
        U.ccx(c_x0, z_z1, a_a1)
    if res in [4, 5, 6, 7]:
        U.ccx(c_x0, z_z1, a_a2)
    
    U.append(ADDER_MOD(False), [c_c0, a_a0, b_b0, c_c1, 
                          a_a1, b_b1, c_c2, a_a2, b_b2, b_b3, 
                          n_n0, n_n1, n_n2, zero_t])
    
    # writes m * 2**1 mod N to the a register
    res = m * 2**1 % N 
    if res in [1, 3, 5, 8]:
        U.ccx(c_x0, z_z1, a_a0)
    if res in [2, 3, 6, 7]:
        U.ccx(c_x0, z_z1, a_a1)
    if res in [4, 5, 6, 7]:
        U.ccx(c_x0, z_z1, a_a2)
    
    U.barrier()
    
    # writes m * 2**2 mod N to the a register
    res = m * 2**2 % N 
    if res in [1, 3, 5, 8]:
        U.ccx(c_x0, z_z2, a_a0)
    if res in [2, 3, 6, 7]:
        U.ccx(c_x0, z_z2, a_a1)
    if res in [4, 5, 6, 7]:
        U.ccx(c_x0, z_z2, a_a2)
    
    U.append(ADDER_MOD(False), [c_c0, a_a0, b_b0, c_c1, 
                          a_a1, b_b1, c_c2, a_a2, b_b2, b_b3, 
                          n_n0, n_n1, n_n2, zero_t])
    
    # writes m * 2**2 mod N to the a register
    res = m * 2**2 % N 
    if res in [1, 3, 5, 8]:
        U.ccx(c_x0, z_z2, a_a0)
    if res in [2, 3, 6, 7]:
        U.ccx(c_x0, z_z2, a_a1)
    if res in [4, 5, 6, 7]:
        U.ccx(c_x0, z_z2, a_a2)
    
    U.barrier()
    
    U.x(c_x0)
    U.ccx(c_x0, z_z0, b_b0)
    U.ccx(c_x0, z_z1, b_b1)
    U.ccx(c_x0, z_z2, b_b2)
    U.x(c_x0)
    
    if inverse == True:
        U = U.inverse()
    U.name = "Ctrl_MULT_MOD"
    return U


def CSWAP(inverse):
    U = QuantumCircuit(3)
    
    U.ccx(0,1,2)
    U.ccx(0,2,1)
    U.ccx(0,1,2)
    
    if inverse == True:
        U.inverse()
    U.name = "CSWAP"
    
    return U


def MODULAR_EXPONENTIATION(N, y):
    U = QuantumCircuit(c_x0, c_x1, c_x2, z_z0, z_z1, z_z2, c_c0, a_a0, b_b0, c_c1,
                        a_a1, b_b1, c_c2, a_a2, b_b2, b_b3, 
                        n_n0, n_n1, n_n2, zero_t)
    
    
    # Firt time
    m = y**(2**0)
    U.append(Ctrl_MULT_MOD(N, m, False), [c_x0, z_z0, z_z1, z_z2, c_c0, a_a0, b_b0, c_c1,
                            a_a1, b_b1, c_c2, a_a2, b_b2, b_b3, 
                            n_n0, n_n1, n_n2, zero_t]) 
    
    U.append(CSWAP(False), [c_x0, z_z0, b_b0])
    U.append(CSWAP(False), [c_x0, z_z1, b_b1])
    U.append(CSWAP(False), [c_x0, z_z2, b_b2])

    m = modinv(y**(2**0), N)
    U.append(Ctrl_MULT_MOD(N, m, True), [c_x0, z_z0, z_z1, z_z2, c_c0, a_a0, b_b0, c_c1,
                            a_a1, b_b1, c_c2, a_a2, b_b2, b_b3, 
                            n_n0, n_n1, n_n2, zero_t]) 

    # Second time
    m = y**(2**1)
    U.append(Ctrl_MULT_MOD(N, m, False), [c_x1, z_z0, z_z1, z_z2, c_c0, a_a0, b_b0, c_c1,
                        a_a1, b_b1, c_c2, a_a2, b_b2, b_b3, 
                        n_n0, n_n1, n_n2, zero_t])
    
    U.append(CSWAP(False), [c_x1, z_z0, b_b0])
    U.append(CSWAP(False), [c_x1, z_z1, b_b1])
    U.append(CSWAP(False), [c_x1, z_z2, b_b2])
    
    m = modinv(y**(2**1), N)
    U.append(Ctrl_MULT_MOD(N, m, True), [c_x1, z_z0, z_z1, z_z2, c_c0, a_a0, b_b0, c_c1,
                            a_a1, b_b1, c_c2, a_a2, b_b2, b_b3, 
                            n_n0, n_n1, n_n2, zero_t]) 
    
    # Third time
    m = y**(2**2)
    U.append(Ctrl_MULT_MOD(N, m, False), [c_x2, z_z0, z_z1, z_z2, c_c0, a_a0, b_b0, c_c1,
                        a_a1, b_b1, c_c2, a_a2, b_b2, b_b3, 
                        n_n0, n_n1, n_n2, zero_t])
    
    U.append(CSWAP(False), [c_x2, z_z0, b_b0])
    U.append(CSWAP(False), [c_x2, z_z1, b_b1])
    U.append(CSWAP(False), [c_x2, z_z2, b_b2])
    
    m = modinv(y**(2**2), N)
    U.append(Ctrl_MULT_MOD(N, m, True), [c_x2, z_z0, z_z1, z_z2, c_c0, a_a0, b_b0, c_c1,
                            a_a1, b_b1, c_c2, a_a2, b_b2, b_b3, 
                            n_n0, n_n1, n_n2, zero_t]) 
    

    U.name = "MODULAR_EXPONENTIATION"
    return U



prod = False
if prod == True:
    c = ClassicalRegister(3)
    
    qc = QuantumCircuit(c_x0, c_x1, c_x2, z_z0, z_z1, z_z2, c_c0, a_a0, b_b0, c_c1,
                            a_a1, b_b1, c_c2, a_a2, b_b2, b_b3, 
                            n_n0, n_n1, n_n2, zero_t, c)

    
    # N=5 = 101
    qc.x(n_n0)
    #qc.x(n_n1)
    qc.x(n_n2)
    
    # z = 1 # start value
    qc.x(z_z0)
    #qc.x(z_z1)
    #qc.x(z_z2)
    
    # c = x = 3
    qc.x(c_x0)
    qc.x(c_x1)
    qc.x(c_x2)
    
    N = 5
    y = 3
    x = 6
    
    qc.append(MODULAR_EXPONENTIATION(N, y), [c_x0, c_x1, c_x2, z_z0, z_z1, z_z2, c_c0, a_a0, b_b0, c_c1,
                            a_a1, b_b1, c_c2, a_a2, b_b2, b_b3, 
                            n_n0, n_n1, n_n2, zero_t])

    qc.barrier()
    
    qc.measure(z_z0, c[0])
    qc.measure(z_z1, c[1])
    qc.measure(z_z2, c[2])
    
    #qc.draw(output='mpl')
    counts = execute(qc, backend=sim, shots=1000).result().get_counts(qc)
    ##plot_histogram(counts)
    print('quantum result: ', int('0b'+list(counts.keys())[0], 2))
    print('classical result: ', y**x % N)



# Test MODULAR_EXPONENTIATION
test2 = True
if test2 == True:
    
    c = ClassicalRegister(4)
    
    qc = QuantumCircuit(c_x0, c_x1, c_x2, z_z0, z_z1, z_z2, c_c0, a_a0, b_b0, c_c1,
                        a_a1, b_b1, c_c2, a_a2, b_b2, b_b3, 
                        n_n0, n_n1, n_n2, zero_t, c)

    
    # N=5 = 101
    qc.x(n_n0)
    #qc.x(n_n1)
    qc.x(n_n2)
    
    # z = 1 start value, constant
    qc.x(z_z0)
    
    # x value
    #qc.x(c_x0)
    qc.x(c_x1)
    qc.x(c_x2)
    
    N = 5
    y = 3
    x = 6
    
    
    # Firt time
    m = y**(2**0)
    qc.append(Ctrl_MULT_MOD(N, m, False), [c_x0, z_z0, z_z1, z_z2, c_c0, a_a0, b_b0, c_c1,
                            a_a1, b_b1, c_c2, a_a2, b_b2, b_b3, 
                            n_n0, n_n1, n_n2, zero_t]) 
    
    qc.append(CSWAP(False), [c_x0, z_z0, b_b0])
    qc.append(CSWAP(False), [c_x0, z_z1, b_b1])
    qc.append(CSWAP(False), [c_x0, z_z2, b_b2])

    m = modinv(y**(2**0), N)
    qc.append(Ctrl_MULT_MOD(N, m, True), [c_x0, z_z0, z_z1, z_z2, c_c0, a_a0, b_b0, c_c1,
                             a_a1, b_b1, c_c2, a_a2, b_b2, b_b3, 
                             n_n0, n_n1, n_n2, zero_t]) 

    # # Second time
    m = y**(2**1)
    qc.append(Ctrl_MULT_MOD(N, m, False), [c_x1, z_z0, z_z1, z_z2, c_c0, a_a0, b_b0, c_c1,
                         a_a1, b_b1, c_c2, a_a2, b_b2, b_b3, 
                         n_n0, n_n1, n_n2, zero_t])
    
    qc.append(CSWAP(False), [c_x1, z_z0, b_b0])
    qc.append(CSWAP(False), [c_x1, z_z1, b_b1])
    qc.append(CSWAP(False), [c_x1, z_z2, b_b2])
    
    m = modinv(y**(2**1), N)
    qc.append(Ctrl_MULT_MOD(N, m, True), [c_x1, z_z0, z_z1, z_z2, c_c0, a_a0, b_b0, c_c1,
                            a_a1, b_b1, c_c2, a_a2, b_b2, b_b3, 
                            n_n0, n_n1, n_n2, zero_t]) 
    
    # Third time
    m = y**(2**2)
    qc.append(Ctrl_MULT_MOD(N, m, False), [c_x2, z_z0, z_z1, z_z2, c_c0, a_a0, b_b0, c_c1,
                       a_a1, b_b1, c_c2, a_a2, b_b2, b_b3, 
                        n_n0, n_n1, n_n2, zero_t])
    
    qc.append(CSWAP(False), [c_x2, z_z0, b_b0])
    qc.append(CSWAP(False), [c_x2, z_z1, b_b1])
    qc.append(CSWAP(False), [c_x2, z_z2, b_b2])
    
    m = modinv(y**(2**2), N)
    qc.append(Ctrl_MULT_MOD(N, m, True), [c_x2, z_z0, z_z1, z_z2, c_c0, a_a0, b_b0, c_c1,
                             a_a1, b_b1, c_c2, a_a2, b_b2, b_b3, 
                             n_n0, n_n1, n_n2, zero_t]) 
    
    
    qc.measure(z_z0, c[0])
    qc.measure(z_z1, c[1])
    qc.measure(z_z2, c[2])
    
    #qc.measure(b_b0, c[0])
    #qc.measure(b_b1, c[1])
    #qc.measure(b_b2, c[2])
    #qc.measure(b_b3, c[3])
    
    #qc.measure(a_a0, c[0])
    #qc.measure(a_a1, c[1])
    #qc.measure(a_a2, c[2])
    
    #qc.measure(n_n0, c[0])
    #qc.measure(n_n1, c[1])
    #qc.measure(n_n2, c[2])
    
    

    counts = execute(qc, backend=sim, shots=1000).result().get_counts(qc)
    print('quantum result: ', int('0b'+list(counts.keys())[0], 2))    
    print('classical result: ', 1 * int(bin(x)[2:][2]) * y*(2**0) * int(bin(x)[2:][1]) * y*(2**1) * int(bin(x)[2:][0]) * y*(2**2) % N)
    


# Test Ctrl_MULT_MOD = z*m mod N
test1 = False
if test1 == True:
    
    c = ClassicalRegister(4)
    
    qc = QuantumCircuit(c_x0, z_z0, z_z1, z_z2, c_c0, a_a0, b_b0, c_c1,
                            a_a1, b_b1, c_c2, a_a2, b_b2, b_b3, 
                            n_n0, n_n1, n_n2, zero_t, c)
    
    # N=5 = 101
    qc.x(n_n0)
    #qc.x(n_n1)
    qc.x(n_n2)
    
    # z
    #qc.x(z_z0)
    #qc.x(z_z1)
    qc.x(z_z2)

    # c
    qc.x(c_x0)  
    
    z = 4
    m = 3
    N = 5
    
    # calculates z * m mod N = 1 * 2 mod 5 = 2 
    qc.append(Ctrl_MULT_MOD(N, m, False), [c_x0, z_z0, z_z1, z_z2, c_c0, a_a0, b_b0, c_c1,
                        a_a1, b_b1, c_c2, a_a2, b_b2, b_b3, 
                        n_n0, n_n1, n_n2, zero_t])
    
    qc.measure(b_b0, c[0])
    qc.measure(b_b1, c[1])
    qc.measure(b_b2, c[2])
    qc.measure(b_b3, c[3])


    counts = execute(qc, backend=sim, shots=1000).result().get_counts(qc)
    print('quantum result: ', int('0b'+list(counts.keys())[0], 2))    
    print('classical partial result: ', z*m % N)
